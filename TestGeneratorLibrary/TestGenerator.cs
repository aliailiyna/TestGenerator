using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace TestGeneratorLibrary
{
    public class TestGenerator
    {
        // Generating tests from source code
        public List<ResultOfTestGeneration> GenerateTests(string code)
        {
            var syntaxTree = CSharpSyntaxTree.ParseText(code);
            var classes = syntaxTree.GetRoot().DescendantNodes().OfType<ClassDeclarationSyntax>().ToList();
            var namespaceDeclaration = syntaxTree.GetRoot().DescendantNodes().
                OfType<NamespaceDeclarationSyntax>().ToList()[0];

            var testClasses = new List<ResultOfTestGeneration>();

            foreach (var classDeclaration in classes)
            {
                var methods = classDeclaration.DescendantNodes().OfType<MethodDeclarationSyntax>().
                    Where(method => method.Modifiers.Any(modifier => modifier.Text == "public")).ToList();

                if (methods.Count > 0)
                {
                    var testSourceCode = string.Join(
                        "\r\n",
                        "using Microsoft.VisualStudio.TestTools.UnitTesting;",
                        $"using {namespaceDeclaration.Name};\r\n",
                        $"namespace {namespaceDeclaration.Name}.UnitTest\r\n{{",
                        "\t[TestClass]",
                        $"\tpublic class {classDeclaration.Identifier.Text}UnitTest\r\n\t{{");
                    foreach (var methodDeclaration in methods)
                    {
                        testSourceCode += string.Join(
                            "\r\n",
                            "\r\n\t\t[TestMethod]",
                            $"\t\tpublic void {methodDeclaration.Identifier.Text}Test()\r\n\t\t{{",
                            "\t\t\tAssert.Fail(\"autogenerated\");\r\n\t\t}\r\n");
                    }
                    testSourceCode += "\t}\r\n}\r\n";

                    testClasses.Add(new ResultOfTestGeneration(
                        string.Format($"{classDeclaration.Identifier.Text}UnitTest"), testSourceCode));
                }
                else if (methods.Count == 0)
                {
                    var testSourceCode = string.Join(
                        "\r\n",
                        "using Microsoft.VisualStudio.TestTools.UnitTesting;",
                        $"using {namespaceDeclaration.Name};\r\n",
                        $"namespace {namespaceDeclaration.Name}.UnitTest\r\n{{",
                        "\t[TestClass]",
                         $"\tpublic class {classDeclaration.Identifier.Text}UnitTest\r\n\t{{\r\n",
                         "\t}\r\n}\r\n");
                    //testSourceCode += "\r\n\t}\r\n}\r\n";
                    //var testSourceCode = "";
                    testClasses.Add(new ResultOfTestGeneration(
                        string.Format($"{classDeclaration.Identifier.Text}UnitTest"), testSourceCode));
                }
            }
            return testClasses;
        }

        // Generating tests (async)
        public async Task<List<ResultOfTestGeneration>> GenerateAsync(string sourceCode)
        {
            return await Task.Run(() => GenerateTests(sourceCode));
        }
    }
}
